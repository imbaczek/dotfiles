#; reloading tmux (helpful for writing .tmux.conf)
bind-key r source-file ~/.tmux.conf

#; how much time (ms) to chain together keys (defaults to 500)
set -g repeat-time 1000

#; use C-a (like GNU screen)
#; unbind C-b
set -g prefix C-a
bind-key a send-keys C-a

#; abilty to switch to prefix to CTRL-B (F11/F12)
#bind-key -n F11 set-option -g prefix C-b
#bind-key -n F12 set-option -g prefix C-a

#; allow some keys to work with CTRL too
bind-key C-a last-window
bind-key C-b last-window
bind-key C-p previous-window
bind-key C-d detach-client
bind-key C-c new-window

#; add repeats for some things
bind-key -r C-o rotate-window
bind-key -r o select-pane -t :.+

#; lets use | and - (visually looks like how the splits work)
#; shifted works too (i get confused)
bind-key | split-window -h -p 20 \; swap-pane -U
if-shell 'test "`tmux -V`" = "tmux 2.0"' 'bind-key | split-window -h -b -p 20'

bind-key \ split-window -h -p 20 \; swap-pane -U
if-shell 'test "`tmux -V`" = "tmux 2.0"' 'bind-key \ split-window -h -b -p 20'

bind-key - split-window -v -p 20 \; swap-pane -U
if-shell 'test "`tmux -V`" = "tmux 2.0"' 'bind-key - split-window -v -b -p 20'

bind-key _ split-window -v -p 20 \; swap-pane -U
if-shell 'test "`tmux -V`" = "tmux 2.0"' 'bind-key _ split-window -v -b -p 20'

#; use the ALT | and - to join panes to the previous window
bind-key M-\ join-pane -h -t !
bind-key M-- join-pane -v -t !

#; alias "!" to "Q" (this is how GNU screen worked)
bind-key Q break-pane

#; alias "%" and "-" to "S" (this is how GNU screen worked)
bind-key S split-window -v

#; alias "w" to '"' (this is how GNU screen worked)
bind-key '"' choose-window

#; clear the window name prior to prompting
bind-key , command-prompt "rename-window '%%'"

#; alias "A" to ',' (this is how GNU screen worked)
bind-key A command-prompt "rename-window '%%'"

#; reset automatic window renaming (shift of "," which is rename)
bind-key < set -w automatic-rename on

#; alias "ESCAPE" to 'C-[' (this is how GNU screen worked)
bind-key ESCAPE copy-mode

#; navigate (vi-like)
set -wg mode-keys vi
bind-key -r C-h select-pane -L
bind-key -r C-j select-pane -D
bind-key -r C-k select-pane -U
bind-key -r C-l select-pane -R
bind-key -r h select-window -t :-
bind-key -r l select-window -t :+

#; access windows 10 - 19 with ALT-N
bind-key M-0 select-window -t :10
bind-key M-1 select-window -t :11
bind-key M-2 select-window -t :12
bind-key M-3 select-window -t :13
bind-key M-4 select-window -t :14
bind-key M-5 select-window -t :15
bind-key M-6 select-window -t :16
bind-key M-7 select-window -t :17
bind-key M-8 select-window -t :18
bind-key M-9 select-window -t :19

#; resizing (vi-like)
bind-key -r M-h resize-pane -L 5
bind-key -r M-j resize-pane -D 5
bind-key -r M-k resize-pane -U 5
bind-key -r M-l resize-pane -R 5

#; layouts
bind-key -n F5 select-layout even-horizontal
bind-key -n F6 select-layout even-vertical
bind-key -n F7 select-layout main-horizontal
bind-key -n F8 select-layout main-vertical
bind-key -n F9 select-layout tiled

#; rerun last command in next PANE (numerically, and wraps)
bind-key z send-keys -t :.+ "r\n"

#; toggle sync panes using ALT-EQUAL
bind-key M-= set -w synchronize-panes

#; ssh to a machine (new window)
bind-key n   command-prompt -p "What server:" "new-window -n '%1' 'ssh -qtt %1'"
bind-key C-n command-prompt -p "What server:" "new-window -n '%1' 'ssh -qtt %1'"

#; clone/switch to a project/repo
bind-key P command-prompt -p "What repo:" "run-shell 'gitrepo -S root -tc -- %1'"

#; quick enable caffeinate
bind-key { new-window -t :99 -d -n Caffeinate 'echo Keeping awake while attached to power; /usr/bin/caffeinate -s'
bind-key } kill-window -t Caffeinate

#; ssh to a machine (split)
bind-key = command-prompt -p "What server:" "split-window -p 20 'ssh -tt %%' ; swap-pane -U"
if-shell 'test "`tmux -V`" = "tmux 2.0"' "bind-key = command-prompt -p 'What server:' \"split-window -b -p 20 'ssh -tt %%'\""

bind-key + command-prompt -p "What server:" "split-window -h -p 20 'ssh -tt %%' ; swap-pane -U"
if-shell 'test "`tmux -V`" = "tmux 2.0"' "bind-key + command-prompt -p 'What server:' \"split-window -h -b -p 20 'ssh -tt %%'\""

#; split mysql to a database
bind-key m command-prompt -p "What database (<db> [suffix]):" "split-window '~/bin/gomysql %%'"

#; don't use alt screen for less, vim, etc.
set -wg alternate-screen off

#; misc
set -wg clock-mode-style 12
set -sg escape-time 0
set -g  visual-activity on
set -g  visual-content on
set -g  visual-silence on
set -g  detach-on-destroy off
set -g  display-panes-time 1500
set -g  display-time 1500
set -g  history-limit 10000

#; colors!
set -wg clock-mode-colour colour39
set -g  default-terminal "xterm-256color"

#; status bar

#;  Character pair    Replaced with
#;  #(shell-command)  First line of the command's output
#;  #[attributes]     Colour or attribute change
#;  #H                Hostname of local host
#;  #F                Current window flag
#;  #I                Current window index
#;  #P                Current pane index
#;  #S                Session name
#;  #T                Current window title
#;  #W                Current window name
#;  ##                A literal #

#; toggle using the status line
set -g status on
set -g status-justify left #; possibly centre,right

#; standard status
set -g status-bg colour0
set -g status-fg colour7
set -g status-attr none

#; left status
set -g status-left-length 40
set -t 0 status-left-length 0 #; disable left status on session 0
set -g status-left-bg default
set -g status-left-fg colour3
set -g status-left-attr none
set -g status-left '[#S]'

#; inactive status
set -wg window-status-bg colour0
set -wg window-status-fg default
set -wg window-status-attr none
set -wg window-status-format '#I:#W'

#; active status
set -wg window-status-current-bg colour238
set -wg window-status-current-fg colour15
set -wg window-status-current-attr none
set -wg window-status-current-format '#I:[#W]'

#; right status
set -g status-right-length 80
#set -g status-right '#[bg=default,fg=colour10]#(date)'
set -g status-right '#(~/bin/mytmuxstatus root)'

#; borders
set -g pane-active-border-fg colour15
set -g pane-border-fg colour8

#; OSX reattach-to-user-namespace
if-shell "test -f /usr/local/bin/reattach-to-user-namespace" 'set -g default-command "reattach-to-user-namespace -l bash"'

#; notification
display-message "TMUX config reloaded"
